var b = require('bonescript');
var fs = require('http');
var fs = require('fs');
var cadencePin = 'P8_19';
var speedPin = 'P8_13';
var last_update=null;
var last_signal=null;
var bounce_time=200;
var counts=0;

var counters=new Array();

var cadence_counter=new counter(cadencePin);
var speed_counter=new counter(speedPin);

//setTimeout(detach, 15000);


function interrupt_callback(data,pin) 
{
	if(typeof counters[pin]==='undefined')
	{
		return;
	}
	counter=counters[pin];
	counter.update(new Date().getTime());
	
}
function counter(pin)
{
	this.pin=pin;
	this.last_update=null;
	this.counts=0;
	this.bounce_time=100;
	b.pinMode(this.pin,b.INPUT);
	b.attachInterrupt(this.pin,true,'rising'
	,function(data)
		{interrupt_callback(data,pin);}
	);
	this.update=function(time)
	{
		if(this.last_update===null)
		{
			console.log("First Event:"+this.pin);
			this.last_update=time;
			this.startup=time;
			return;
		}
		var delta = time - this.last_update;
		if(delta>this.bounce_time)
		{
			console.log(this.pin+":"+delta);
			this.last_update=time;
		}
	}
	counters[pin]=this;
	return this;
}

function interruptCallback(x) {
 if(last_update===null)
 {
    	last_update=new Date().getTime();
	last_signal=last_update;
        console.log("First event");
 }
 else
 {
	new_time=new Date().getTime();
	var delta=new_time-last_update;
	if(delta>bounce_time)
	{
		counts++;
		last_update=new_time;
        	cadence=60000/delta;
		console.log("Counts:"+counts+"|"+(60000/delta));
        	fs.writeFile("/usr/share/bone101/cadence.html", ""+cadence.toFixed(0)+","+counts, 
        function(err) {
            if(err) {
                console.log(err);
            } else {
            }
        
    });
}
}
}

